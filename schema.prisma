generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model users {
  user_id              String         @id @default(uuid())
  name                 String         @db.VarChar(255)
  lastName             String?        @db.VarChar(255)
  email                String?        @unique @db.VarChar(255)
  passwordHash         String         @db.VarChar(255)
  created_at           DateTime       @default(now())
  updated_at           DateTime       @updatedAt
  bots                 bots[]
  activeSubscriptionId String?        @unique() @db.VarChar(255)  // Stores the ID of the active subscription
  subscriptions        subscription[] // Array to store all subscriptions related to this user
}

model pricing_tier {
  id            Int            @id @default(autoincrement())
  tier_name     String         @db.VarChar(255)
  price         Float
  bot_count     Int
  context_limit Int
  token_limit   Int
  storage_limit Int
  //memory
  //models
  subscriptions subscription[]
}

model subscription {
  id         String       @id @default(uuid())
  user_id    String
  tier_id    Int          @default(0)
  start_date DateTime
  end_date   DateTime
  token_usage Int @default(0)
  user       users        @relation(fields: [user_id], references: [user_id])
  tier       pricing_tier @relation(fields: [tier_id], references: [id])
}

model bots {
  bot_id           String          @id @default(uuid())
  name             String          @db.VarChar(255)
  created_at       DateTime        @default(now())
  updated_at       DateTime        @updatedAt
  type             String?         @default("website")
  user_id          String
  general_configs  Json            @default("{\"has_memory\": false}")
  model_configs    Json            @default("{\"model_name\": \"GPT-3.5Turbo\", \"Temperature\": 0.5}")
  ui_configs       Json
  security_configs Json
  evals            Json            @default("{}")
  status           String          @default("notActive")
  token_limit      Int             @default(8000000)
  token_limit_pp   Int             @default(8000)
  datasource       datasources[]
  user             users           @relation(fields: [user_id], references: [user_id])
  conversations    conversations[]
  //records          records[]
}

model datasources {
  datasource_id  String  @id @default(uuid())
  bot_id         String
  static_files   Json?   @default("[]")
  urls           Json?   @default("[]")
  text_input     String? @default("") @db.VarChar(255)
  qANDa_input    Json?   @default("[]")
  knowledge_base Json?   @default("{}")
  total_char     String? @db.VarChar(255)
  bot            bots    @relation(fields: [bot_id], references: [bot_id], onDelete: Cascade)
}

model conversations {
  conversation_id String    @id @default(uuid())
  bot_id          String
  widget_version  String
  session_id      String
  user_ip         String? // Optional field
  user_location   String? // Optional field
  metadata        Json? // Optional field
  created_at      DateTime  @default(now())
  records         records[]
  bot             bots      @relation(fields: [bot_id], references: [bot_id])
}

model records {
  record_id         String        @id
  conversation_id   String
  // bot_id            String
  llm_response      String
  user_message      String
  //context_docs
  //current_page    String?    // Optional field - Add it in future
  user_message_time DateTime
  llm_response_time DateTime
  tokens_used       Int           @default(0)
  // created_at        DateTime      @default(now())
  conversations     conversations @relation(fields: [conversation_id], references: [conversation_id])
  //bot               bots          @relation(fields: [bot_id], references: [bot_id])
  //bots              bots?         @relation(fields: [botsBot_id], references: [bot_id])
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.

model langchain_pg_embedding {
  collection_id           String?                  @db.Uuid
  embedding               Unsupported("vector")?
  document                String?                  @db.VarChar
  cmetadata               Json?                    @db.Json
  custom_id               String?                  @db.VarChar
  uuid                    String                   @id @db.Uuid
  langchain_pg_collection langchain_pg_collection? @relation(fields: [collection_id], references: [uuid], onDelete: Cascade, onUpdate: NoAction)

  @@ignore
}

model langchain_pg_collection {
  name                   String?                  @db.VarChar
  cmetadata              Json?                    @db.Json
  uuid                   String                   @id @db.Uuid
  langchain_pg_embedding langchain_pg_embedding[]

  @@ignore
}
